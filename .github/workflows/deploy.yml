name: Deploy to Supabase

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
    
    - name: Check Secrets
      run: |
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "‚ùå SUPABASE_ACCESS_TOKEN secret is missing"
          echo "Please add this secret to your GitHub repository:"
          echo "1. Go to Settings > Secrets and variables > Actions"
          echo "2. Add SUPABASE_ACCESS_TOKEN with your Supabase access token"
          echo "3. Get it from: https://supabase.com/dashboard/account/tokens"
          exit 1
        fi
        if [ -z "${{ secrets.SUPABASE_PROJECT_REF }}" ]; then
          echo "‚ùå SUPABASE_PROJECT_REF secret is missing"
          echo "Please add this secret to your GitHub repository:"
          echo "1. Go to Settings > Secrets and variables > Actions"
          echo "2. Add SUPABASE_PROJECT_REF with your project reference"
          echo "3. Find it in your Supabase dashboard under Settings > General"
          exit 1
        fi
        echo "‚úÖ All required secrets are present"
        echo "üéØ Project: ${{ secrets.SUPABASE_PROJECT_REF }}"
    
    - name: Validate Configuration
      run: |
        echo "üîç Running pre-deployment validation..."
        chmod +x scripts/validate-critical-config.sh
        ./scripts/validate-critical-config.sh || {
          echo "‚ùå Configuration validation failed"
          echo "Please fix the issues above before deploying"
          exit 1
        }
        echo "‚úÖ Configuration validation passed"
    
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      run: |
        echo "üöÄ Deploying to Supabase project: $PROJECT_REF"
        
        # Track deployment status
        DEPLOYED_FUNCTIONS=()
        FAILED_FUNCTIONS=()
        
        # Function to deploy with error handling
        deploy_function() {
          local func_name=$1
          local extra_args=$2
          echo "üì¶ Deploying $func_name function..."
          
          if supabase functions deploy $func_name --project-ref $PROJECT_REF $extra_args; then
            DEPLOYED_FUNCTIONS+=("$func_name")
            echo "‚úÖ $func_name deployed successfully"
          else
            FAILED_FUNCTIONS+=("$func_name")
            echo "‚ùå $func_name deployment failed"
          fi
          
          # Show config if it exists
          if [ -f "supabase/functions/$func_name/config.toml" ]; then
            echo "ÔøΩ $func_name config:"
            cat "supabase/functions/$func_name/config.toml" || true
          fi
          echo ""
        }
        
        # Deploy all functions
        deploy_function "telegram" ""
        deploy_function "telegram-webhook" "--no-verify-jwt"
        deploy_function "telegram-poll" ""
        deploy_function "oauth-oura" "--no-verify-jwt"
        deploy_function "oauth-strava" "--no-verify-jwt"
        deploy_function "oauth-test" "--no-verify-jwt"
        deploy_function "data-sync-oura" ""
        deploy_function "data-sync-strava" ""
        deploy_function "pre-briefing-sync" ""
        deploy_function "daily-briefings" ""
        deploy_function "test-db" ""
        
        # Print deployment summary
        echo "üìä DEPLOYMENT SUMMARY"
        echo "===================="
        echo "‚úÖ Successfully deployed (${#DEPLOYED_FUNCTIONS[@]}):"
        for func in "${DEPLOYED_FUNCTIONS[@]}"; do
          echo "  - $func"
        done
        
        if [ ${#FAILED_FUNCTIONS[@]} -gt 0 ]; then
          echo ""
          echo "‚ùå Failed deployments (${#FAILED_FUNCTIONS[@]}):"
          for func in "${FAILED_FUNCTIONS[@]}"; do
            echo "  - $func"
          done
          echo ""
          echo "‚ö†Ô∏è  Some functions failed to deploy. Check the logs above for details."
          exit 1
        else
          echo ""
          echo "üéâ All functions deployed successfully!"
        fi
        
    - name: Update Database Schema
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      run: |
        echo "üóÑÔ∏è Updating database schema..."
        echo "‚ö†Ô∏è Database migrations require manual execution due to authentication requirements"
        echo "Please run the following command locally to apply the migration:"
        echo "supabase db push"
        echo "Migration file: supabase/migrations/20250813140514_add_conversation_state_columns.sql"
        echo "‚úÖ Functions deployed successfully - database migration skipped"
